package main

import (
	"context"


	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	pb "github.com/travix/gotf-example/pb"
	providerpb "github.com/travix/gotf-example/provider/providerpb"
)

// This file was generated by protoc-gen-gotf as a scaffold, it can be modified.
// If you want to regenerate the scaffold delete or rename this file and run protoc with protoc-gen-gotf again.

var _ providerpb.UserResourceExec = &UserResourceExec{}

type UserResourceExec struct {
	userClient pb.UserServiceClient
}

func (e *UserResourceExec) Create(ctx context.Context, _ resource.CreateRequest, _ *resource.CreateResponse, data *pb.User) (*pb.User, diag.Diagnostics) {
	user, err := e.userClient.CreateUser(ctx, data)
	if err != nil {
		var diags diag.Diagnostics
		diags.AddError("failed to create user", err.Error())
		return nil, diags
	}
	return user, nil
}

func (e *UserResourceExec) Read(ctx context.Context, _ resource.ReadRequest, _ *resource.ReadResponse, data *pb.User) (*pb.User, diag.Diagnostics) {
	user, err := e.userClient.GetUser(ctx, &pb.GetUserRequest{Username: data.Username})
	if err != nil {
		st, ok := status.FromError(err)
		if ok && st.Code() == codes.NotFound {
			return data, nil
		}
		var diags diag.Diagnostics
		diags.AddError("failed to get user", err.Error())
		return nil, diags
	}
	return user, nil
}

func (e *UserResourceExec) Update(ctx context.Context, _ resource.UpdateRequest, _ *resource.UpdateResponse, data *pb.User) (*pb.User, diag.Diagnostics) {
	user, err := e.userClient.UpdateUser(ctx, data)
	if err != nil {
		var diags diag.Diagnostics
		diags.AddError("failed to update user", err.Error())
		return nil, diags
	}
	return user, nil
}

func (e *UserResourceExec) Delete(ctx context.Context, _ resource.DeleteRequest, _ *resource.DeleteResponse, data *pb.User) diag.Diagnostics {
	_, err := e.userClient.DeleteUser(ctx, data)
	if err != nil {
		var diags diag.Diagnostics
		diags.AddError("failed to delete user", err.Error())
		return diags
	}
	return nil
}

func (e *UserResourceExec) SetUserServiceClient(client pb.UserServiceClient) {
	e.userClient = client
}
